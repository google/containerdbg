name: goreleaser

on:
  push:
    tags: ['*']

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    outputs:
      hashes: ${{ steps.hash.outputs.hashes }}
    steps:
    - uses: actions/checkout@v3
    - name: Unshallow
      if: ${{ !env.ACT }}
      run: git fetch --prune --unshallow
    - uses: actions/setup-go@v3
      with:
        go-version: 1.19
        check-latest: true
    - uses: supplypike/setup-bin@v1
      name: Install kpt
      with:
        uri: 'https://github.com/GoogleContainerTools/kpt/releases/download/v1.0.0-beta.19/kpt_linux_amd64'
        version: 'v1.0.0-beta.19'
        name: 'kpt'
    - name: Set tag
      id: vars
      run: echo "::set-output name=tag::${GITHUB_REF#refs/*/}"
    - name: generate
      env:
        TARGET_REPO: europe-docker.pkg.dev/migrate-modernize-public/containerdbg
        IMAGE_PULL_POLICY: IfNotPresent
        TAG: ${{ steps.vars.outputs.tag }}
      run: make pre
    - uses: goreleaser/goreleaser-action@v3.1.0
      id: run-goreleaser
      with:
        version: latest
        args: release --rm-dist
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TARGET_REPO: europe-docker.pkg.dev/migrate-modernize-public/containerdbg
    - name: Generate subject
      id: hash
      env:
        ARTIFACTS: "${{ steps.run-goreleaser.outputs.artifacts }}"
      run: |
        set -euo pipefail
        checksum_file=$(echo "$ARTIFACTS" | jq -r '.[] | select (.type=="Checksum") | .path')
        echo "::set-output name=hashes::$(cat $checksum_file | base64 -w0)"

  provenance:
    needs: [goreleaser]
    permissions:
      actions: read
      id-token: write
      contents: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.4.0
    with:
      base64-subjects: "${{ needs.goreleaser.outputs.hashes }}"
      upload-assets: true

  verification:
    needs: [goreleaser, provenance]
    runs-on: ubuntu-latest
    permissions: read-all
    steps:
    - name: Install the verifier
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        set -euo pipefail
        gh -R slsa-framework/slsa-verifier release download v1.4.0 -p "slsa-verifier-linux-amd64"
        chmod ug+x slsa-verifier-linux-amd64
        COMPUTED_HASH=$(sha256sum slsa-verifier-linux-amd64 | cut -d ' ' -f1)
        EXPECTED_HASH="37db23392c7918bb4e243cdb097ed5f9d14b9b965dc1905b25bc2d1c0c91bf3d"
        if [[ "$EXPECTED_HASH" != "$COMPUTED_HASH" ]]; then
          echo "error: expected $EXPECTED_HASH, computed $COMPUTED_HASH"
          exit 1
        fi
    - name: Download assets
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        set -euo pipefail
        gh -R "$GITHUB_REPOSITORY" release download "$GITHUB_REF_NAME" -p "*.tar.gz"
        gh -R "$GITHUB_REPOSITORY" release download "$GITHUB_REF_NAME" -p "attestation.intoto.jsonl"
    - name: Verify assets
      env:
        CHECKSUMS: ${{ needs.goreleaser.outputs.hashes }}
        PROVENANCE: ${{ needs.provenance.outputs.attestation-name }}
      run: |
        set -euo pipefail
        checksums=$(echo "$CHECKSUMS" | base64 -d)
          while read -r line; do
              fn=$(echo $line | cut -d ' ' -f2)
              echo "Verifying $fn"
              ./slsa-verifier-linux-amd64 -artifact-path "$fn" \
                                      -provenance "$PROVENANCE" \
                                      -source "github.com/$GITHUB_REPOSITORY" \
                                      -tag "$GITHUB_REF_NAME"
          done <<<"$checksums"
